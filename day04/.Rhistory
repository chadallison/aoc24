(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
solp2
p1 = length(sol)
sprintf("Part 1 solution: %s", p1)
p2 = sum(sapply(1:(nrow(day4) - 2), function(i) {
sapply(1:(ncol(day4) - 2), function(j) {
p2 = day4[i:(i + 2), j:(j + 2)]
p2.2 = p2[nrow(p2):1, ]
if (p2[2, 2] == "A" &&
(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
raw = read.delim("input.txt", header = F)
mat = str_split_fixed(raw$V1, "", nchar(raw[1, ]))
d1 = row(mat) - col(mat)
diag1 = split(mat, d1)
diag2 = split(mat[nrow(mat):1, ], d1)
sol = c()
for (i in 1:nrow(day4)) {
row = str_extract_all(paste0(day4[i, ], collapse = ""), "XMAS", simplify = TRUE)
row1 = str_extract_all(paste0(day4[i, ], collapse = ""), "SAMX", simplify = TRUE)
col = str_extract_all(paste0(day4[, i], collapse = ""), "XMAS", simplify = TRUE)
col1 = str_extract_all(paste0(day4[, i], collapse = ""), "SAMX", simplify = TRUE)
sol = c(sol, row, row1, col, col1)
}
for (i in 1:length(diag1)) {
sol = c(sol,
str_extract_all(paste0(diag1[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag1[[i]], collapse = ""), "SAMX", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "SAMX", simplify = TRUE))
}
p1 = length(sol)
sprintf("Part 1 solution: %s", p1)
p2 = sum(sapply(1:(nrow(day4) - 2), function(i) {
sapply(1:(ncol(day4) - 2), function(j) {
p2 = day4[i:(i + 2), j:(j + 2)]
p2.2 = p2[nrow(p2):1, ]
if (p2[2, 2] == "A" &&
(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
sprintf("Part 2 solution: %s", p2)
# part 1
input = read.delim("input.txt", header = F)
mat = str_split_fixed(input$V1, "", nchar(input[1, ]))
d1 = row(mat) - col(mat)
diag1 = split(mat, d1)
diag2 = split(mat[nrow(mat):1, ], d1)
sol = c()
for (i in 1:nrow(day4)) {
row = str_extract_all(paste0(day4[i, ], collapse = ""), "XMAS", simplify = TRUE)
row1 = str_extract_all(paste0(day4[i, ], collapse = ""), "SAMX", simplify = TRUE)
col = str_extract_all(paste0(day4[, i], collapse = ""), "XMAS", simplify = TRUE)
col1 = str_extract_all(paste0(day4[, i], collapse = ""), "SAMX", simplify = TRUE)
sol = c(sol, row, row1, col, col1)
}
for (i in 1:length(diag1)) {
sol = c(sol,
str_extract_all(paste0(diag1[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag1[[i]], collapse = ""), "SAMX", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "SAMX", simplify = TRUE))
}
p1 = length(sol)
sprintf("Part 1 solution: %s", p1)
# part 1
input = read.delim("input.txt", header = F)
mat = str_split_fixed(input$V1, "", nchar(input[1, ]))
d1 = row(mat) - col(mat)
diag1 = split(mat, d1)
diag2 = split(mat[nrow(mat):1, ], d1)
sol = c()
for (i in 1:nrow(day4)) {
row = str_extract_all(paste0(day4[i, ], collapse = ""), "XMAS", simplify = TRUE)
row1 = str_extract_all(paste0(day4[i, ], collapse = ""), "SAMX", simplify = TRUE)
col = str_extract_all(paste0(day4[, i], collapse = ""), "XMAS", simplify = TRUE)
col1 = str_extract_all(paste0(day4[, i], collapse = ""), "SAMX", simplify = TRUE)
sol = c(sol, row, row1, col, col1)
}
for (i in 1:length(diag1)) {
sol = c(sol,
str_extract_all(paste0(diag1[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag1[[i]], collapse = ""), "SAMX", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "SAMX", simplify = TRUE))
}
p1 = length(sol)
sprintf("Part 1 solution: %s", p1)
library(tidyverse)
input = readLines("input.txt")
# part 1
mat = str_split_fixed(input$V1, "", nchar(input[1, ]))
# part 1
mat = str_split_fixed(input, "", nchar(input[1, ]))
# part 1
mat = str_split_fixed(input, "", nchar(input[1, ]))
library(tidyverse)
input = read.delim("input.txt", header = F)
# part 1
mat = str_split_fixed(input$V1, "", nchar(input[1, ]))
d1 = row(mat) - col(mat)
diag1 = split(mat, d1)
diag2 = split(mat[nrow(mat):1, ], d1)
sol = c()
for (i in 1:nrow(day4)) {
row = str_extract_all(paste0(day4[i, ], collapse = ""), "XMAS", simplify = TRUE)
row1 = str_extract_all(paste0(day4[i, ], collapse = ""), "SAMX", simplify = TRUE)
col = str_extract_all(paste0(day4[, i], collapse = ""), "XMAS", simplify = TRUE)
col1 = str_extract_all(paste0(day4[, i], collapse = ""), "SAMX", simplify = TRUE)
sol = c(sol, row, row1, col, col1)
}
for (i in 1:length(diag1)) {
sol = c(sol,
str_extract_all(paste0(diag1[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag1[[i]], collapse = ""), "SAMX", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "XMAS", simplify = TRUE),
str_extract_all(paste0(diag2[[i]], collapse = ""), "SAMX", simplify = TRUE))
}
p1 = length(sol)
sprintf("Part 1 solution: %s", p1)
# part 2
p2 = sum(sapply(1:(nrow(day4) - 2), function(i) {
sapply(1:(ncol(day4) - 2), function(j) {
p2 = day4[i:(i + 2), j:(j + 2)]
p2.2 = p2[nrow(p2):1, ]
if (p2[2, 2] == "A" &&
(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
sprintf("Part 2 solution: %s", p2)
# part 2
p2 = sum(sapply(1:(nrow(mat) - 2), function(i) {
sapply(1:(ncol(day4) - 2), function(j) {
p2 = day4[i:(i + 2), j:(j + 2)]
p2.2 = p2[nrow(p2):1, ]
if (p2[2, 2] == "A" &&
(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
sprintf("Part 2 solution: %s", p2)
# part 2
p2 = sum(sapply(1:(nrow(mat) - 2), function(i) {
sapply(1:(ncol(mat) - 2), function(j) {
p2 = mat[i:(i + 2), j:(j + 2)]
p2.2 = p2[nrow(p2):1, ]
if (p2[2, 2] == "A" &&
(paste0(diag(p2), collapse = "") %in% c("MAS", "SAM")) &&
(paste0(diag(p2.2), collapse = "") %in% c("MAS", "SAM"))) {
return(1)
}
return(0)
})
}))
sprintf("Part 2 solution: %s", p2)
str_extract_all
?str_extract_all
setwd("~/r_projects/aoc24/day04")
library(tidyverse)
input = readLines("input.txt")
# part 1
# part 2
# part 1
input
# part 1
which(input == " ")
# part 1
input[input == " "]
# part 1
input[900:1100]
# part 1
data.frame(x = input)
# part 1
data.frame(x = input) |>
str_detect(x, " ")
# part 1
data.frame(x = input) |>
filter(str_detect(x, " "))
# part 1
input
# part 1
input[contains(input, "|")]
# part 1
data.frame(x = input)
# part 1
data.frame(x = input) |>
mutate(rn = row_number())
# part 1
data.frame(x = input) |>
mutate(rn = row_number()) |>
filter(str_detect(x, "|"))
# part 1
data.frame(x = input) |>
mutate(rn = row_number()) |>
filter(str_detect(x, ","))
# part 1
data.frame(x = input) |>
mutate(rn = row_number()) |>
filter(str_detect(x, "|"))
# part 1
data.frame(x = input) |>
mutate(rn = row_number()) |>
filter(str_detect(x, ","))
# part 1
input[1176]
# part 1
input[1175]
# part 1
input[1176]
# part 1
input[1177]
# part 1
input[1178]
# part 1
input[1177]
# part 1
which(input == "")
# part 1
split_index = which(input == "")
split_index
input[1:split_index - 1]
input[split_index + 1:length(input)]
length(input)
1:length(input)
input[(split_index + 1):length(input)]
rules = input[1:split_index - 1]
updates = input[(split_index + 1):length(input)]
updates
rules
updates[1]
rules[1]
str_locate(updates[1], rules[1])
str_locate(updates[1], rules[1])[1]
str_locate(updates[1], rules[1])[2]
str_locate(updates[1], rules[1])[1]
str_locate(updates[1], rules[2])[1]
rules[1]
# gus
input <- 'input.txt'
skip <- which(readLines(input) == '')
dt1 <-
input |>
readr::read_delim('|', col_names = FALSE, n_max = skip - 1, show_col_types = FALSE) |>
dplyr::filter(!is.na(.data$X2))
dt2 <-
input |>
readLines()
dt2 <-
dt2[(skip+1):length(dt2)] |>
strsplit(',') |>
purrr::map(as.integer)
# gus
input <- 'input.txt'
skip <- which(readLines(input) == '')
dt1 <-
input |>
readr::read_delim('|', col_names = FALSE, n_max = skip - 1, show_col_types = FALSE) |>
dplyr::filter(!is.na(.data$X2))
dt2 <-
input |>
readLines()
dt2 <-
dt2[(skip+1):length(dt2)] |>
strsplit(',') |>
purrr::map(as.integer)
middle_page <-
dt2 |>
purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid <-
x |>
seq_along() |>
purrr::map_lgl(\(i) {
if (i == length(x)) return(TRUE)
left <- x[i]; right <- x[(i+1):length(x)];
check_right <- dt1$X2[dt1$X1 == left]
all(right %in% check_right)
}) |>
all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
})
sum(middle_page)
# gus
input <- 'input.txt'
skip <- which(readLines(input) == '')
dt1 <-
input |>
readr::read_delim('|', col_names = FALSE, n_max = skip - 1, show_col_types = FALSE) |>
dplyr::filter(!is.na(.data$X2))
dt2 <-
input |>
readLines()
dt2 <-
dt2[(skip+1):length(dt2)] |>
strsplit(',') |>
purrr::map(as.integer)
middle_page <-
dt2 |>
purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid <-
x |>
seq_along() |>
purrr::map_lgl(\(i) {
if (i == length(x)) return(TRUE)
left <- x[i]; right <- x[(i+1):length(x)];
check_right <- dt1$X2[dt1$X1 == left]
all(right %in% check_right)
}) |>
all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
})
sum(middle_page)
swap <- function(x, i = 1) {
left <- x[i]; right <- x[i+1];
check_right <- dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i+1] <- left; x[i] <- right;
swap(x, 1)
} else { swap(x, i + 1) }
}
dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x <- swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
input = "input.txt"
skip = which(readLines(input) == "")
dt1 = readr::read_delim(input, "|", col_names = FALSE, n_max = skip - 1, show_col_types = FALSE) |>
dplyr::filter(!is.na(X2))
dt2 = readLines(input)[(skip+1):length(readLines(input))] |>
strsplit(",") |>
purrr::map(as.integer)
sum(dt2 |> purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid = seq_along(x) |>
purrr::map_lgl(\(i) {
if (i == length(x)) TRUE else {
left = x[i]; right = x[(i+1):length(x)]
all(right %in% dt1$X2[dt1$X1 == left])
}
}) |> all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
}))
dt1 = readr::read_delim(input, "|", col_names = F, n_max = skip - 1, show_col_types = F) |>
dplyr::filter(!is.na(X2))
dt2 = readLines(input)[(skip+1):length(readLines(input))] |>
strsplit(",") |>
purrr::map(as.integer)
sum(dt2 |> purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid = seq_along(x) |>
purrr::map_lgl(\(i) {
if (i == length(x)) T else {
left = x[i]; right = x[(i+1):length(x)]
all(right %in% dt1$X2[dt1$X1 == left])
}
}) |> all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
}))
swap <- function(x, i = 1) {
left <- x[i]; right <- x[i+1];
check_right <- dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i+1] <- left; x[i] <- right;
swap(x, 1)
} else { swap(x, i + 1) }
}
dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x <- swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
p1 = sum(dt2 |> purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid = seq_along(x) |>
purrr::map_lgl(\(i) {
if (i == length(x)) T else {
left = x[i]; right = x[(i+1):length(x)]
all(right %in% dt1$X2[dt1$X1 == left])
}
}) |> all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
}))
sprintf("Part 1 solution: %s", p1)
# part 2
swap = function(x, i = 1) {
left = x[i]; right = x[i+1]
check_right = dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i+1] = left; x[i] = right
swap(x, 1)
} else { swap(x, i + 1) }
}
dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x = swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
# part 2
swap = function(x, i = 1) {
left = x[i]; right = x[i+1]
check_right = dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i+1] = left; x[i] = right
swap(x, 1)
} else { swap(x, i + 1) }
}
p2 = dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x = swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
sprintf("Part 2 solution: %s", p2)
# part 1
dt1 = readr::read_delim(input, "|", col_names = F, n_max = skip - 1, show_col_types = F) |>
dplyr::filter(!is.na(X2))
library(tidyverse)
input = "input.txt"
skip = which(readLines(input) == "")
# part 1
dt1 = readr::read_delim(input, "|", col_names = F, n_max = skip - 1, show_col_types = F) |>
dplyr::filter(!is.na(X2))
dt2 = readLines(input)[(skip + 1):length(readLines(input))] |>
strsplit(",") |>
purrr::map(as.integer)
p1 = sum(dt2 |> purrr::map_int(\(x) {
if (length(x) %% 2 == 0) print(x)
is_valid = seq_along(x) |>
purrr::map_lgl(\(i) {
if (i == length(x)) T else {
left = x[i]; right = x[(i + 1):length(x)]
all(right %in% dt1$X2[dt1$X1 == left])
}
}) |> all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
}))
sprintf("Part 1 solution: %s", p1)
# part 2
swap = function(x, i = 1) {
left = x[i]; right = x[i + 1]
check_right = dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i + 1] = left; x[i] = right
swap(x, 1)
} else { swap(x, i + 1) }
}
p2 = dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x = swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
# part 2
swap = function(x, i = 1) {
left = x[i]; right = x[i + 1]
check_right = dt1$X2[dt1$X1 == left]
if (is.na(right)) return(x)
if (!(right %in% check_right)) {
x[i + 1] = left; x[i] = right
swap(x, 1)
} else { swap(x, i + 1) }
}
middle_page = dt2 |> purrr::map_int(\(x) {
if (length(x) %% 2 == 0) return(0) # Example condition, adjust as needed
is_valid = seq_along(x) |>
purrr::map_lgl(\(i) {
if (i == length(x)) T else {
left = x[i]; right = x[(i + 1):length(x)]
all(right %in% dt1$X2[dt1$X1 == left])
}
}) |> all()
if (is_valid) x[ceiling(length(x) / 2)] else 0
})
p2 = dt2[middle_page == 0] |>
purrr::map_int(\(x) {
x = swap(x)
x[ceiling(length(x) / 2)]
}) |>
sum()
sprintf("Part 2 solution: %s", p2)
