# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if (all(diffs >= 0 & diffs <= 3) | all(diffs <= 0 & diffs >= -3)) {
safe_cnt = safe_cnt + 1
}
}
safe_cnt
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
# Check if strictly increasing or strictly decreasing and within difference constraints
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
safe_cnt
numeric_input <- lapply(input, function(inp) as.numeric(strsplit(inp, " ")[[1]]))
# Efficiently count valid groups
safe_cnt <- sum(sapply(numeric_input, function(grp) {
diffs <- diff(grp)
all(diffs > 0 & diffs <= 3) || all(diffs < 0 & diffs >= -3)
}))
safe_cnt
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
safe_cnt
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
# Check if the group is already safe
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
} else {
# Check all sub-vectors (remove one element at a time)
for (i in seq_along(grp)) {
sub_grp = grp[-i]  # Remove the i-th element
sub_diffs = diff(sub_grp)
if ((all(sub_diffs > 0 & sub_diffs <= 3)) | (all(sub_diffs < 0 & sub_diffs >= -3))) {
safe_cnt = safe_cnt + 1
break  # No need to check further sub-vectors
}
}
}
}
safe_cnt
sprintf("Part 2 solution: %s", safe_cnt)
library(tidyverse)
input = readLines("input.txt")
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs > 0 & sub_diffs <= 3)) | (all(sub_diffs < 0 & sub_diffs >= -3))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
seq_along(c(1, 2, 3))
library(tidyverse)
input = readLines("input.txt")
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs >= 0 & diffs <= 3)) | (all(diffs <= 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs > 0 & diffs <= 3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs < 0 & diffs >= -3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
-1:-3
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs > 0 & sub_diffs <= 3)) | (all(sub_diffs < 0 & sub_diffs >= -3))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs %in% 1:3)) | (all(sub_diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs %in% 1:3)) | (all(sub_diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs %in% 1:3)) | (all(sub_diffs %in% -1:-3))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
library(tidyverse)
input = readLines("input.txt")
# part 1
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -3:-1))) {
safe_cnt = safe_cnt + 1
}
}
sprintf("Part 1 solution: %s", safe_cnt)
# part 2
safe_cnt = 0
for (inp in input) {
grp = as.numeric(unlist(strsplit(inp, " ")))
diffs = diff(grp)
if ((all(diffs %in% 1:3)) | (all(diffs %in% -3:-1))) {
safe_cnt = safe_cnt + 1
} else {
for (i in seq_along(grp)) {
sub_grp = grp[-i]
sub_diffs = diff(sub_grp)
if ((all(sub_diffs %in% 1:3)) | (all(sub_diffs %in% -3:-1))) {
safe_cnt = safe_cnt + 1
break
}
}
}
}
sprintf("Part 2 solution: %s", safe_cnt)
library(tidyverse)
input = readLines("input.txt")
# part 1
input
# part 1
str_extract_all(input, "mul\\(\\d+,\\d+\\)")
# part 1
unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
# part 1
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
data.frame(x = muls)
data.frame(x = muls) |>
str_remove_all(x, "mul(|)")
data.frame(x = muls) |>
str_remove_all(x, "mul(|)")
data.frame(x = muls) |>
str_remove_all(x, "mul")
data.frame(x = muls) |>
str_remove_all(x, pattern = "mul")
data.frame(x = muls)
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul(|)"))
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\("))
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\("))
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)"))
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T)
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b)
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod))
data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
# part 1
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
# part 2
muls
# part 2
input
# part 2
str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)")
# part 2
unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
# part 2
instructions = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
data.frame(x = instructions)
data.frame(x = instructions, rn = row_number())
data.frame(x = instructions)
data.frame(x = instructions, rn = 1:length(instructions))
remove_indices = c()
df
df = data.frame(x = instructions, rn = 1:length(instructions))
df
current_value = T
df
df = data.frame(x = instructions)
df
# part 2
instructions = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
df = data.frame(x = instructions)
df$keep + T
current_keep_state = T
df$keep = T
# part 2
instructions = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
df = data.frame(x = instructions)
df$keep = T
current_keep_state = T
for (i in seq_len(nrow(df))) {
if (df$x[i] == "do()") {
current_keep_state = T
} else if (df$x[i] == "don't()") {
current_keep_state = F
}
df$keep[i] = current_keep_state
}
df
df |>
filter(keep == T)
df |>
filter(keep == T & x != "do()")
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul("))
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\("))
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(\\)"))
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)"))
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T)
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b)
df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
p2 = df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 2 solution: %s", p2)
library(dplyr)
library(stringr)
library(tidyr)
# Extract instructions
instructions <- unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
df <- data.frame(x = instructions)
# Create the "keep" column using cumulative sum and modulo arithmetic
df$keep <- cumsum(df$x == "do()") %% 2 == 1 & !cumsum(df$x == "don't()") %% 2 == 1
# Part 2 calculations
p2 <- df |>
filter(keep & x != "do()") |> # Filter rows where keep is TRUE and not "do()"
mutate(x = str_remove_all(x, "mul\\(|\\)")) |> # Remove function-like parts
separate(x, into = c("a", "b"), sep = ",", convert = TRUE) |> # Split into columns
mutate(prod = a * b) |> # Calculate product
summarise(total = sum(prod)) |> # Summarize the total
pull(total)
library(tidyverse)
input = readLines("input.txt")
# part 1
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
# part 2
instructions = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)"))
df = data.frame(x = instructions)
df$keep = T
current_keep_state = T
for (i in seq_len(nrow(df))) {
if (df$x[i] == "do()") {
current_keep_state = T
} else if (df$x[i] == "don't()") {
current_keep_state = F
}
df$keep[i] = current_keep_state
}
p2 = df |>
filter(keep == T & x != "do()") |>
mutate(x = str_remove_all(x, "mul\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 2 solution: %s", p2)
setwd("~/r_projects/aoc24/day04")
# part 1
tictoc::tic()
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# Extract the numbers directly and compute the result
tictoc::tic()
muls <- str_extract_all(input, "\\d+,\\d+")[[1]]
# Compute the product sum
p1 <- sum(sapply(strsplit(muls, ","), function(x) as.numeric(x[1]) * as.numeric(x[2])))
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# part 1
tictoc::tic()
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# Extract the numbers directly and compute the result
tictoc::tic()
muls <- str_extract_all(input, "\\d+,\\d+")[[1]]
# Compute the product sum
p1 <- sum(sapply(strsplit(muls, ","), function(x) as.numeric(x[1]) * as.numeric(x[2])))
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# part 1
tictoc::tic()
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# Extract the numbers directly and compute the result
tictoc::tic()
muls <- str_extract_all(input, "\\d+,\\d+")[[1]]
# Compute the product sum
p1 <- sum(sapply(strsplit(muls, ","), function(x) as.numeric(x[1]) * as.numeric(x[2])))
sprintf("Part 1 solution: %s", p1)
tictoc::toc()
# part 1
muls = unlist(str_extract_all(input, "mul\\(\\d+,\\d+\\)"))
p1 = data.frame(x = muls) |>
mutate(x = str_remove_all(x, "mul|\\(|\\)")) |>
separate(x, into = c("a", "b"), sep = ",", convert = T) |>
mutate(prod = a * b) |>
summarise(total = sum(prod)) |>
pull(total)
sprintf("Part 1 solution: %s", p1)
