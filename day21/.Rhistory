compute_cheat = function(i, max_cheat) {
p0 = path_co[i]
p1 = path_co[-seq_len(i)]
l1_d = abs(Re(p1) - Re(p0)) + abs(Im(p1) - Im(p0))
sum(l1_d <= max_cheat & seq_along(p1) - l1_d >= 100)
}
p1 = sum(sapply(seq_along(path_co[-1]), compute_cheat, max_cheat = 2L))
sprintf("Part 1 solution: %s", p1)
p2 = sum(sapply(seq_along(path_co[-1]), compute_cheat, max_cheat = 20L))
sprintf("Part 2 solution: %s", p2)
tictoc::tic()
install.packages("tictoc")
tictoc::tic()
n = as.integer(sqrt(length(input)))
wall = which(input == "#")
start = which(input == "S")
end = which(input == "E")
tmp = c(-1, 1, n, -n)
idx_k = function(k) k + tmp
lookup = lapply(seq_len(n ^ 2), idx_k)
path = integer(n ^ 2 - length(wall))
path[1] = start
for (k in 2:length(path)) {
nxt = lookup[[path[k - 1]]]
path[k] = nxt[(!nxt %in% wall) & nxt != c(path[k - 2], 0)[1]]
}
path_co = apply(arrayInd(path, .dim = c(n, n)), 1, \(x) x[1] * 1i + x[2])
compute_cheat = function(i, max_cheat) {
p0 = path_co[i]
p1 = path_co[-seq_len(i)]
l1_d = abs(Re(p1) - Re(p0)) + abs(Im(p1) - Im(p0))
sum(l1_d <= max_cheat & seq_along(p1) - l1_d >= 100)
}
p1 = sum(sapply(seq_along(path_co[-1]), compute_cheat, max_cheat = 2L))
sprintf("Part 1 solution: %s", p1)
p2 = sum(sapply(seq_along(path_co[-1]), compute_cheat, max_cheat = 20L))
sprintf("Part 2 solution: %s", p2)
tictoc::toc()
tictoc::tic()
library(data.table)
n <- as.integer(sqrt(length(input)))
wall <- which(input == "#")
start <- which(input == "S")
end <- which(input == "E")
tmp <- c(-1, 1, n, -n)
# Precompute lookup table more efficiently
lookup <- lapply(seq_len(n ^ 2), function(k) k + tmp)
lookup <- lapply(lookup, function(l) l[l > 0 & l <= n^2])
# Optimized path calculation
path <- integer(n ^ 2 - length(wall))
path[1] <- start
visited <- logical(n ^ 2)
visited[start] <- TRUE
for (k in seq(2, length(path))) {
nxt <- lookup[[path[k - 1]]]
nxt <- nxt[!visited[nxt] & !nxt %in% wall]
if (length(nxt) == 0) break
path[k] <- nxt[1]  # Choose the first valid next step
visited[path[k]] <- TRUE
}
# Trim unused entries in the path
path <- path[path > 0]
# Convert path indices to coordinates
path_co <- complex(real = ((path - 1) %% n) + 1, imaginary = ((path - 1) %/% n) + 1)
# Efficient cheat computation
compute_cheat <- function(i, max_cheat) {
p0 <- path_co[i]
p1 <- path_co[-seq_len(i)]
l1_d <- abs(Re(p1) - Re(p0)) + abs(Im(p1) - Im(p0))
sum(l1_d <= max_cheat & seq_along(p1) - l1_d >= 100)
}
# Part 1 and Part 2 solutions
p1 <- sum(vapply(seq_along(path_co)[-1], compute_cheat, max_cheat = 2L, FUN.VALUE = integer(1)))
sprintf("Part 1 solution: %s", p1)
p2 <- sum(vapply(seq_along(path_co)[-1], compute_cheat, max_cheat = 20L, FUN.VALUE = integer(1)))
sprintf("Part 2 solution: %s", p2)
tictoc::toc()
library(data.table)
library(parallel)
library(data.table)
library(parallel)
n <- as.integer(sqrt(length(input)))
wall <- which(input == "#")
start <- which(input == "S")
end <- which(input == "E")
tmp <- c(-1, 1, n, -n)
# Precompute valid moves efficiently
lookup <- lapply(seq_len(n ^ 2), function(k) {
valid <- k + tmp
valid[valid > 0 & valid <= n^2 & !valid %in% wall]
})
# Optimized pathfinding using queue-based BFS
path <- integer(n ^ 2)
visited <- logical(n ^ 2)
queue <- integer(n ^ 2)
queue_head <- 1
queue_tail <- 1
path[1] <- start
visited[start] <- TRUE
queue[queue_tail] <- start
queue_tail <- queue_tail + 1
while (queue_head < queue_tail) {
curr <- queue[queue_head]
queue_head <- queue_head + 1
nxt <- lookup[[curr]]
nxt <- nxt[!visited[nxt]]
if (length(nxt) > 0) {
path[queue_tail:(queue_tail + length(nxt) - 1)] <- nxt
queue[queue_tail:(queue_tail + length(nxt) - 1)] <- nxt
visited[nxt] <- TRUE
queue_tail <- queue_tail + length(nxt)
}
}
# Trim unused elements in path
path <- path[path > 0]
# Convert to coordinates
path_co <- complex(real = ((path - 1) %% n) + 1, imaginary = ((path - 1) %/% n) + 1)
# Optimized cheat computation
compute_cheat <- function(i, max_cheat, path_co) {
p0 <- path_co[i]
p1 <- path_co[-seq_len(i)]
l1_d <- abs(Re(p1) - Re(p0)) + abs(Im(p1) - Im(p0))
sum(l1_d <= max_cheat & seq_along(p1) - l1_d >= 100)
}
# Parallelized computation of cheats
compute_cheats_parallel <- function(path_co, max_cheat) {
mclapply(seq_along(path_co)[-1], function(i) {
compute_cheat(i, max_cheat, path_co)
}, mc.cores = detectCores() - 1)
}
# Part 1 and Part 2 solutions
p1 <- sum(unlist(compute_cheats_parallel(path_co, max_cheat = 2L)))
sprintf("Part 1 solution: %s", p1)
p2 <- sum(unlist(compute_cheats_parallel(path_co, max_cheat = 20L)))
sprintf("Part 2 solution: %s", p2)
library(tidyverse)
input = readLines("input.txt")
# part 1
input
# part 1
cheapestRobot <- function(presses, nrobots) {
if (nrobots == 1) {
return(nchar(presses))
}
result <- 0
padConfig <- matrix(c("X", "^", "A", "<", "v", ">"), nrow = 2, byrow = TRUE)
curr <- 1
curc <- 3
for (press in strsplit(presses, "")[[1]]) {
for (nextr in 1:2) {
for (nextc in 1:3) {
if (padConfig[nextr, nextc] == press) {
result <- result + cheapestDirPad(curr, curc, nextr, nextc, nrobots)
curr <- nextr
curc <- nextc
}
}
}
}
return(result)
}
hash <- function(curr, curc, destr, destc, nrobots) {
result <- curr
result <- result * 4 + curc
result <- result * 4 + destr
result <- result * 4 + destc
result <- result * 30 + nrobots
return(result)
}
memo <- new.env()
cheapestDirPad <- function(curr, curc, destr, destc, nrobots) {
h <- hash(curr, curc, destr, destc, nrobots)
if (exists(as.character(h), envir = memo)) {
return(get(as.character(h), envir = memo))
}
answer <- .Machine$integer.max
q <- list(list(r = curr, c = curc, presses = ""))
while (length(q) > 0) {
v <- q[[1]]
q <- q[-1]
if (v$r == destr && v$c == destc) {
rec <- cheapestRobot(paste0(v$presses, "A"), nrobots - 1)
answer <- min(answer, rec)
next
}
if (v$r != 0 || v$c != 0) {
if (v$r < destr) {
q <- append(q, list(list(r = v$r + 1, c = v$c, presses = paste0(v$presses, "v"))))
} else if (v$r > destr) {
q <- append(q, list(list(r = v$r - 1, c = v$c, presses = paste0(v$presses, "^"))))
}
if (v$c < destc) {
q <- append(q, list(list(r = v$r, c = v$c + 1, presses = paste0(v$presses, ">"))))
} else if (v$c > destc) {
q <- append(q, list(list(r = v$r, c = v$c - 1, presses = paste0(v$presses, "<"))))
}
}
}
assign(as.character(h), answer, envir = memo)
return(answer)
}
cheapest <- function(curr, curc, destr, destc) {
answer <- .Machine$integer.max
q <- list(list(r = curr, c = curc, presses = ""))
while (length(q) > 0) {
v <- q[[1]]
q <- q[-1]
if (v$r == destr && v$c == destc) {
rec <- cheapestRobot(paste0(v$presses, "A"), 26)
answer <- min(answer, rec)
next
}
if (v$r != 3 || v$c != 0) {
if (v$r < destr) {
q <- append(q, list(list(r = v$r + 1, c = v$c, presses = paste0(v$presses, "v"))))
} else if (v$r > destr) {
q <- append(q, list(list(r = v$r - 1, c = v$c, presses = paste0(v$presses, "^"))))
}
if (v$c < destc) {
q <- append(q, list(list(r = v$r, c = v$c + 1, presses = paste0(v$presses, ">"))))
} else if (v$c > destc) {
q <- append(q, list(list(r = v$r, c = v$c - 1, presses = paste0(v$presses, "<"))))
}
}
}
return(answer)
}
main <- function() {
sum <- 0
while (TRUE) {
s <- readLines(n = 1)
if (length(s) == 0) {
break
}
result <- 0
padConfig <- matrix(c("7", "8", "9", "4", "5", "6", "1", "2", "3", "X", "0", "A"), nrow = 4, byrow = TRUE)
curr <- 4
curc <- 3
for (press in strsplit(s, "")[[1]]) {
for (nextr in 1:4) {
for (nextc in 1:3) {
if (padConfig[nextr, nextc] == press) {
result <- result + cheapest(curr, curc, nextr, nextc)
curr <- nextr
curc <- nextc
}
}
}
}
code <- as.numeric(s)
sum <- sum + result * code
}
cat(sum, "\n")
}
# Run the main function (uncomment to use interactively)
# main()
# Run the main function (uncomment to use interactively)
# main()
main()
# part 1
# Define the Pos class equivalent
Pos <- function(i, j) {
structure(list(i = i, j = j), class = "Pos")
}
`+.Pos` <- function(a, b) {
Pos(a$i + b$i, a$j + b$j)
}
`-.Pos` <- function(a, b) {
Pos(a$i - b$i, a$j - b$j)
}
`==.Pos` <- function(a, b) {
isTRUE(all.equal(c(a$i, a$j), c(b$i, b$j)))
}
# Read input file
codes <- readLines("input.txt")
codes <- gsub("\\s+$", "", codes)  # Strip trailing whitespace
# Define numpad and dirpad
numpad <- list(
`7` = Pos(0, 0), `8` = Pos(0, 1), `9` = Pos(0, 2),
`4` = Pos(1, 0), `5` = Pos(1, 1), `6` = Pos(1, 2),
`1` = Pos(2, 0), `2` = Pos(2, 1), `3` = Pos(2, 2),
`0` = Pos(3, 1), `A` = Pos(3, 2)
)
numpad_inv <- setNames(names(numpad), sapply(numpad, function(x) paste(x$i, x$j)))
dirpad <- list(
`^` = Pos(0, 1), `A` = Pos(0, 2),
`<` = Pos(1, 0), `v` = Pos(1, 1), `>` = Pos(1, 2)
)
dirpad_inv <- setNames(names(dirpad), sapply(dirpad, function(x) paste(x$i, x$j)))
dirs <- list(
`^` = Pos(-1, 0), `v` = Pos(1, 0),
`<` = Pos(0, -1), `>` = Pos(0, 1)
)
# Memoization using an environment
cache <- new.env(parent = emptyenv())
func <- function(robot_id, current_key, dest_key, total_robots) {
key <- paste(robot_id, current_key, dest_key, total_robots, sep = ":")
if (exists(key, envir = cache)) {
return(get(key, envir = cache))
}
pad <- if (robot_id == 0) numpad else dirpad
pad_inv <- if (robot_id == 0) numpad_inv else dirpad_inv
current_pos <- pad[[current_key]]
dest_pos <- pad[[dest_key]]
delta <- dest_pos - current_pos
if (robot_id == total_robots - 1) {
result <- abs(delta$i) + abs(delta$j) + 1
assign(key, result, envir = cache)
return(result)
}
seq <- c(rep("^", abs(delta$i) * (delta$i < 0)),
rep("v", abs(delta$i) * (delta$i > 0)),
rep("<", abs(delta$j) * (delta$j < 0)),
rep(">", abs(delta$j) * (delta$j > 0)))
if (length(seq) == 0) {
result <- 1
assign(key, result, envir = cache)
return(result)
}
candidates <- numeric(0)
for (r in unique(combn(seq, length(seq), simplify = FALSE))) {
pos <- current_pos
steps <- 0
valid <- TRUE
for (i in seq_along(r)) {
steps <- steps + func(robot_id + 1, ifelse(i == 1, "A", r[i - 1]), r[i], total_robots)
pos <- pos + dirs[[r[i]]]
if (is.null(pad_inv[[paste(pos$i, pos$j)]])) {
valid <- FALSE
break
}
}
if (valid) {
steps <- steps + func(robot_id + 1, r[length(r)], "A", total_robots)
candidates <- c(candidates, steps)
}
}
result <- min(candidates)
assign(key, result, envir = cache)
return(result)
}
# Part 1 and 2
for (num_robots in c(3, 26)) {
total_complexity <- 0
for (code in codes) {
complexity <- func(0, "A", substr(code, 1, 1), num_robots)
for (i in 2:nchar(code)) {
complexity <- complexity + func(0, substr(code, i - 1, i - 1), substr(code, i, i), num_robots)
}
total_complexity <- total_complexity + complexity * as.numeric(substr(code, 1, nchar(code) - 1))
}
print(total_complexity)
}
# part 1
library(hash)
install.packages("hash")
# part 1
library(hash)
library(Rcpp)
library(data.table)
library(clipr)
# Read the input file
s <- trimws(readLines("input.txt"))
codes <- unlist(strsplit(s, "\n"))
# Create the maps
m1 <- list(
c(0, 0) = "7",
# part 1
library(hash)
library(Rcpp)
library(data.table)
library(clipr)
# Read the input file
s <- trimws(readLines("input.txt"))
codes <- unlist(strsplit(s, "\n"))
# Create the maps
m1 <- list(
c(0, 0) = "7",
# part 1
library(hash)
library(Rcpp)
library(data.table)
library(clipr)
# Read the input file
s <- trimws(readLines("input.txt"))
codes <- unlist(strsplit(s, "\n"))
# Create the maps
m1 <- list(
c(0, 0): "7",
c(0, 1) = "8",
# part 1
library(hash)
library(data.table)
library(stringr)
# Read the input file
codes <- strsplit(readLines("input.txt"), "\n")[[1]]
# Create the key mappings
keyp <- hash()
setwd("~/r_projects/aoc24/day21")
library(tidyverse)
# part 1
pad1 <- setNames(c(1:3 + 1i, 1:3 + 2i, 1:3 + 3i, 2:3 + 4i), c(7:9, 4:6, 1:3, 0, "A"))
pad2 <- setNames(c(2:3 + 1i, 1:3 + 2i), c("^", "A", "<", "v", ">"))
data21 <- readLines("input.txt")
push1 <- function(code, pos0 = "A") {
if (any(grepl("\\d", code))) {
pad <- pad1
gap <- 1 + 4i
} else {
pad <- pad2
gap <- 1 + 1i
}
mv <- c("v" = 1i, "^" = -1i, "<" = - 1, ">" = 1)
if (length(code) == 1) code <- strsplit(code, "")[[1]]
vec <- pad[code]
pos <- pad[pos0]
res <- vector("list", length(code))
for (k in seq_along(code)) {
y <- Im(pos) - Im(vec[k])
x <- Re(pos) - Re(vec[k])
tmp <- c(rep(if (y > 0) "^" else "v", abs(y)), rep(if (x > 0) "<" else ">", abs(x)))
tmp2 <- unique(list(tmp, rev(tmp)))
tmp2 <- tmp2[sapply(tmp2, \(a) all(pos + cumsum(mv[a]) != gap))]
res[[k]] <- sapply(tmp2, paste, collapse = "")
pos <- vec[k]
}
paste0(Reduce(\(x, y) as.character(outer(x, y, \(x, y) paste(x, y, sep = "A"))), res), "A")
}
code_seq <- function(code) {
code1 <- push1(code)
code2 <- unlist(lapply(code1, push1))
code3 <- unlist(lapply(code2, push1))
min(nchar(code3)) * as.numeric(gsub("\\D", "", code))
}
sum(sapply(data21, code_seq))
#part 2-----------
f <- function(a1, a2, a3, a4) {
optimize_push <- function(y, x) {
res1 <- push1(y, x)
if (length(res1) == 1) return(res1)
if (y == "A" & x == "v") return(c("^>A", ">^A")[a1])
if (y == "v" & x == "A") return(c("v<A", "<vA")[a2])
if (y == "^" & x == ">") return(c("<^A", "^<A")[a3])
if (y == ">" & x == "^") return(c("v>A", ">vA")[a4])
nc <- sapply(sub("A", "", res1), \(a) nchar(push1(a))[1])
res1[which.min(nc)]
}
map <- unlist(lapply(names(pad2), \(x) sapply(names(pad2), \(y) optimize_push(y, x))))
names(map) <- paste0(rep(names(pad2), each = 5), names(map))
map_mat <- t(sapply(names(map), \(x) as.integer(grepl(x, paste0("A", map), fixed = TRUE))))
colnames(map_mat) <- rownames(map_mat)
code_seq3 <- function(code, n) {
code1 <- paste0("A", push1(code))
code1 <- strsplit(code1, "")
res <- sapply(code1, function(cd) {
y <- paste0(cd[-length(cd)], cd[-1])
x <- integer(25L)
names(x) <- colnames(map_mat)
x[names(table(y))] <- table(y)
x <- x[rownames(map_mat)]
sum(Reduce(`%*%`, rep(list(map_mat), n)) %*% x)
})
min(res) * as.numeric(gsub("\\D", "", code))
}
sum(sapply(data21, code_seq3, n = 25))
}
eg <- expand.grid(a1 = 1:2, a2 = 1:2, a3 = 1:2, a4 = 1:2)
sprintf("%.f", min(apply(eg, 1, \(x) f(x[1], x[2], x[3], x[4]))))
library(tidyverse)
# part 1
data22 <- read.table("input.txt")[,1]
# part 1
data22 <- read.table("input.txt")[,1]
int2bit <- function(x)  {
n <- floor(log(x, base = 2))
res <- seq_len(n + 1)
for (k in n:0) {
res[k + 1] <- if (x >= 2^k) 1L else 0L
x <- x - res[k + 1]*2^k
}
return(c(res, rep_len(0L, 23 - n)))
}
xbit <- sapply(data22, int2bit)
dig <- matrix(0L, nrow = length(data22), ncol = 2001)
dig[,1] <- data22 %% 10L
k <- 2L
evolve <- function(xbit) {
xbit[7:24, ] <- (xbit[7:24, ] + xbit[7:24 - 6, ]) %% 2L
xbit[1:19, ] <- (xbit[1:19, ] + xbit[1:19 + 5, ]) %% 2L
xbit[12:24, ] <- (xbit[12:24, ] + xbit[12:24 - 11, ]) %% 2L
dig[, k] <<- colSums(xbit * (2^(0:23))) %% 10L
k <<- k + 1L
return(xbit)
}
# part 1------------
a <- Reduce(\(x, y) evolve(x), rep(list(xbit), 2001))
sum(colSums(a * (2^(0:23))))
# part 2-------
del <- apply(dig, 1, diff)
res <- matrix(0, length(data22), 1997)
for (k in 1:1997) {
x <- del[0:3 + k, ]
res[, k] <- colSums(x * 19^(3:0))
}
tab <- sort(table(as.integer(res)), decreasing = TRUE)[1:250]
uc <- as.integer(names(tab))
res2 <- 0
for (y in uc) {
cl <- apply(res, 1, \(x) which(x == y)[1])
res2 <- max(res2, sum(diag(dig[,cl + 4]), na.rm = TRUE))
}
res2
